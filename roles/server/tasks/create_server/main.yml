---
# A task is to create a server
#
# An expected variable to be passed are below.
#   server:
#     A variable of dictionary of the server that will be created.
#

# Due custome parameters

#- name: "Declare option-nics to use it when \"openstack create server\""
- name: "Declare option-nics to use it when \"openstack create server\""
  set_fact:
    server.nics: []
  when: "('nics' not in server)"

- name: "Block to declare \"server.nic[].port-id\""
  block:

    # get_port_uuid_from_the_name.sh promises return 0 only if UUID could be printed correctly.
    # Then this ansible does not have to check the output of it.
    - name: "Get port uuid with get_port_uuid_from_the_name.sh"
      ansible.builtin.script: ./get_port_uuid_from_the_name.sh "{{ server.extended.name_of_port }}"
      register: result_port_uuid

    - name: "Declare a variable \"port_uuid\" from \"result_port_uuid\""
      set_fact:
        port_uuid: "{{ result_port_uuid.stdout_lines[-1] }}"

    - name: "Declare server.nic[].port-id of a name of port \"{{ server.extended.name_of_port }}\""
      set_fact:
        server.nics: "{{ server.nics + [\"port-id\": port-uuid] }}"
  when: "('extended' in server) and ('name_of_port' in server.extended)"

- name: "Reeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeemove"
  set_fact:
    server: "{{ server | ansible.utils.remove_keys(target=['extended']) }}"
  when: "('extended' in server)"

- name: Print a server that will be created
  ansible.builtin.debug:
    msg: "server.name={{ server.name }}, server.image={{ server.image }}, {% if 'key_name' in server %}server.key_name={{ server.key_name }}{% endif %}, server.nics={{ server.nics }}"

- name: "Create a new instance ({{ server }})"
  openstack.cloud.server: "{{ server }}"

## FIXME: Creating a server like below is not a flexible way.
#- name: Include do_create_server.yml if you did not declare key_name(key name of ssh)
#  include_tasks: do_create_server.yml
#  when: "'key_name' not in server"
#
#- name: Include do_create_server_with_ssh_public_key_pair.yml if you declared key_name(key name of ssh)
#  include_tasks: do_create_server_with_ssh_public_key_pair.yml
#  when: "'key_name' in server"

