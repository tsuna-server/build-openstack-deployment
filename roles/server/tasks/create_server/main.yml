---
# A task is to create a server
#
# An expected variable to be passed are below.
#   server:
#     A variable of dictionary of the server that will be created.
#

# Due custome parameters

- name: "Declare copied_server to realize an imutability a variable server"
  set_fact:
    copied_server: "{{ server }}"

- name: "Block to declare \"server.nic[].port-id\""
  block:

    # TODO: This instruction only support one option on nic "port-id".
    #       If this ansible Ansible scenario want to support other options in "nics", we have to change the instructions.

    # get_port_uuid_from_the_name.sh promises return 0 only if UUID could be printed correctly.
    # Then this ansible does not have to check the output of it.
    - name: "Get port uuid with get_port_uuid_from_the_name.sh"
      ansible.builtin.script: ./get_port_uuid_from_the_name.sh "{{ server.extended.name_of_port }}"
      register: result_port_uuid

    - name: "Declare a variable \"port_uuid\" from \"result_port_uuid\""
      set_fact:
        port_uuid: "{{ result_port_uuid.stdout_lines[-1] }}"

    - name: "Declare server.nic[].port-id of a name of port \"{{ server.extended.name_of_port }}\""
      set_fact:
        copied_server: "{{ copied_server | default({}) | combine({ 'nics': [{'port-id': port_uuid}] }) }}"

  when: "('extended' in server) and ('name_of_port' in server.extended)"

- name: "Remove extended parameter that is created temporary on variable files"
  set_fact:
    copied_server: "{{ copied_server | ansible.utils.remove_keys(target=['extended']) }}"
  when: "('extended' in server)"

- name: Print a server that will be created
  ansible.builtin.debug:
    msg: "server.name={{ server.name }}, server.image={{ server.image }}, {% if 'key_name' in server %}server.key_name={{ server.key_name }}{% endif %}, server.nics={{ server.nics }}"

- name: "Create a new instance ({{ copied_server }})"
  openstack.cloud.server: "{{ copied_server }}"

