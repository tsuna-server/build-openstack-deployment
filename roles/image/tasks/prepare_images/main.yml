---
# This task create an image.
# If a file of image was not existed, this instruction will download it.
# Variables declared are bloew.
#
#   image:
#     A dictionary contains informations of image.
#   image.name:
#     A name of the image that will be created.
#   image.cpu_arch:
#     CPU archtecture of the image.
#   image.distro:
#     A distribution of the image.
#   image.download_url:
#     A URL to download the image.

- name: Declare iso file image name
  set_fact:
    iso_file_name: "{{ image.name }}.img"

- name: "Declare auth_parameters if \"auth_ref\" is existed at (group_vars.openstack.images.[].name == {{ image.name }})"
  set_fact:
    auth_parameters: "{{ group_vars.openstack.auth[\"image.auth_ref\"] }}"
  when: '"auth_ref" in image'

- name: "Declare auth_parameters if \"auth_ref\" is NOT existed at (group_vars.openstack.images.[].name == {{ image.name }})"
  set_fact:
    auth_parameters: "{{ group_vars.openstack.auth[\"default\"] }}"
  when: '"auth_ref" not in image'

- name: Print a declared auth_parameters
  ansible.builtin.debug:
    msg: "auth_parameters => {{ auth_parameters }}"

- name: Declare iso full image path
  set_fact:
    full_iso_file_path: "{{ [image_directory, iso_file_name] | path_join }}"

- name: Check an iso file of it has already downloaded
  stat:
    path: "{{ full_iso_file_path }}"
  register: flag_file

- name: Download base image if it has not existed
  get_url:
    url: "{{ image.download_url }}"
    dest: "{{ full_iso_file_path }}"
    timeout: 900
  retries: 3
  delay: 2
  when: not flag_file.stat.exists

- name: Print an image that will be created
  ansible.builtin.debug:
    msg: "image.name={{ image.name }}, filename={{ full_iso_file_path }}, image.cpu_arch={{ image.cpu_arch }}, image.distro={{ image.distro }}"

# Declare an image
- name: Declare an image
  openstack.cloud.image:
    auth: "{{ auth_parameters }}"
    name: "{{ image.name }}"
    container_format: bare
    disk_format: qcow2
    state: present
    filename: "{{ full_iso_file_path }}"
    tags:
      - custom
    properties:
      cpu_arch: "{{ image.cpu_arch }}"
      distro: "{{ image.distro }}"


